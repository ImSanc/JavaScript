/**
  You need to create an express HTTP server in Node.js which will handle the logic of a todo list app.
  - Don't use any database, just store all the data in an array to store the todo list data (in-memory)
  - Hard todo: Try to save responses in files, so that even if u exit the app and run it again, the data remains (similar to databases)

  Each todo has a title and a description. The title is a string and the description is a string.
  Each todo should also get an unique autogenerated id every time it is created
  The expected API endpoints are defined below,
  1.GET /todos - Retrieve all todo items
    Description: Returns a list of all todo items.
    Response: 200 OK with an array of todo items in JSON format.
    Example: GET http://localhost:3000/todos
    
  2.GET /todos/:id - Retrieve a specific todo item by ID
    Description: Returns a specific todo item identified by its ID.
    Response: 200 OK with the todo item in JSON format if found, or 404 Not Found if not found.
    Example: GET http://localhost:3000/todos/123
    
  3. POST /todos - Create a new todo item
    Description: Creates a new todo item.
    Request Body: JSON object representing the todo item.
    Response: 201 Created with the ID of the created todo item in JSON format. eg: {id: 1}
    Example: POST http://localhost:3000/todos
    Request Body: { "title": "Buy groceries", "completed": false, description: "I should buy groceries" }
    
  4. PUT /todos/:id - Update an existing todo item by ID
    Description: Updates an existing todo item identified by its ID.
    Request Body: JSON object representing the updated todo item.
    Response: 200 OK if the todo item was found and updated, or 404 Not Found if not found.
    Example: PUT http://localhost:3000/todos/123
    Request Body: { "title": "Buy groceries", "completed": true }
    
  5. DELETE /todos/:id - Delete a todo item by ID
    Description: Deletes a todo item identified by its ID.
    Response: 200 OK if the todo item was found and deleted, or 404 Not Found if not found.
    Example: DELETE http://localhost:3000/todos/123

    - For any other route not defined in the server return 404

  Testing the server - run `npm run test-todoServer` command in terminal
 */
  const express = require('express');
  const bodyParser = require('body-parser');
const { request } = require('http');
const { title } = require('process');
  
  const app = express();
  
  app.use(bodyParser.json());
  

  app.listen(3000, ()=>{
    console.log("server started");
  })

  const todoList =[];

  app.get("/todos", (request,response)=>{
    response.status(200).json(todoList);
  })

  app.get("/todos/:id", (request,response)=>{
    const id = request.params.id;
    const todo = todoList.filter( item => item.id == id);
    
    if(todo.length ==0)
        {
            response.status(404).json("ID not found");
        }
        else
        {
            response.status(200).json(todo);
        }
  })
  
  app.post("/todos", (request,response)=>{
    const body = request.body;
    const id = Math.floor(Math.random() * 10);
    todoList.push( {
         id :id ,
        title : body.title,
        description : body.description,
        completed : body.completed
    })

    response.status(201).json( {ID : id});
  })

  app.put("/todos/:id", (request,response)=>{
    const id = request.params.id;
    const todoItem = todoList.find( item => item.id == id)


    if(todoItem !== undefined)
    {
    todoItem.title = request.body.title || todoItem.title;
    todoItem.description = request.body.description || todoItem.description;
    todoItem.completed = request.body.completed!== undefined ? request.body.completed : todoItem.completed ;
    response.status(200).json({item : todoItem});
    }
    else{
        response.status(404).json("ID not found");
    }

  })

  app.delete("/todos/:id", (request,response)=>{
    const id =parseInt( request.params.id);
    const index = todoList.findIndex( item => item.id === id);
    if(index ===-1)
        {
            response.status(404).json("ID not found");
        }
        else{
            const removedTask = todoList.splice(index,1);
            response.status(200).json({item : removedTask});
        }
  })

  